<blender_cave name="EVE" synchroPort="2731" synchroAddress="225.0.0.37">
  <!-- We are able to render as many as usefull users for a given Virtual Environment. Each use must be represented by a name (that is converted inside to an ID). -->
  <user name='user A' eye_separation='0.06'>

    <!-- Each user must have a default position. ie.: a position used when there is no tracking available. By default (0.0, 0.0, 0.0) means that the user is a the camera position. -->
    <default_position>0.0, 0.0, 0.0</default_position>
  </user>

  <user>
    <default_position>0.0, 0.0, 0.0</default_position>
  </user>

  <!-- Each "computer" section describe one computer working for the CAVE rendering
  The first computer/screen is the master one. To set it to the console should be a good idea ... Computer "name" is the name given by "hostname" Windows or Linux command
  '*' means whatever computer. So, it works but you should set it to the correct name of the computer -->
  <computer name="*">

    <!-- Each screen represent an instance of blender that is running on a given computer. For example, when a single computer render several screens for avirtual environment, one instance of blender must be run for each screen. The screen "name" is use to describe one instance of blenderCAVE that is running on a given computer -->
    <screen name="console">
      <!-- player section is used by BlenderCave.py to know the window parameters for the blenderplayer window
	   display : under Unix, will be for the DISPLAY variable (ie. : multi-head systems)
	   options : whatever options (generally, display size or stereo windows or ...)
      -->
      <player display=":0.1" options="-w 600 600"/>

      <!-- Graphic buffer represents OpenGL current buffer. Only usefull in case of Quad-Buffer stereo rendering
      The "name" must be :
      * 'alone' : for no quadbuffer stereo buffer
      * 'left'  : for left buffer
      * 'right' : for right buffer
      The 'user' correspond to the name of the user (see section "user")
      The 'eye' must be 'middle' (no stereo), 'left' or 'right'
      -->
      <graphic_buffer name="alone" user='user A' eye="middle"/>
      <graphic_buffer name="right" user='user A' eye="right"/>
      <graphic_buffer name="left" user='user A' eye="left"/>

      <!-- In case of blenderplayer full screen, that may be usefull to reduce the viewport
      Coordinates : x1, y1, x2, y2 -->
      <viewport>350, 0, 1250, 900</viewport>

      <!-- Each corner represents the 3d coordinates of the screen in real world. Coordinates are considered in the reference frame of the camera. 'topRightCorner', 'topLeftCorner' and 'bottomRightCorner' must be specify. 'bottomLeftCorner' is automatically computed by considering that the screen must be rectangular -->
      <corner name="topRightCorner">1.0, 1.0, -1.0</corner>
      <corner name="topLeftCorner">-1.0, 1.0, -1.0</corner>
      <corner name="bottomRightCorner">1.0, -1.0, -1.0</corner>
    </screen>

    <screen name="other console">
      <graphic_buffer name="alone" user='user A' eye="middle"/>
      <corner name="topRightCorner">0.0, 1.0, -1.0</corner>
      <corner name="topLeftCorner">-1.4142136, 1.0, 0.4142136</corner>
      <corner name="bottomRightCorner">0.0, -1.0, -1.0</corner>
    </screen>

  </computer>

  <computer name="other computer">

    <screen name="first screen">
      <graphic_buffer name="left" user='user A' eye="left"/>
      <graphic_buffer name="right" user='user A' eye="right"/>
      <graphic_buffer name="alone" user='user A' eye="middle"/>
      <corner name="topRightCorner">2.395,0.0,-1.35</corner>
      <corner name="topLeftCorner">-2.395,0.0,-1.35</corner>
      <corner name="bottomRightCorner">2.395,0.0,1.35</corner>
    </screen>

    <screen name="second">
      <graphic_buffer name="alone" user='user A' eye="middle"/>
      <corner name="topRightCorner">-2.395,2.7,-1.35</corner>
      <corner name="topLeftCorner">-2.395,2.7,1.35</corner>
      <corner name="bottomRightCorner">-2.395,0.0,-1.35</corner>
    </screen>

  </computer>

  <!-- The processor contains everything concerning the interactions. It is the python file concerning the current scene. For instance, for Mountain.blend, its processor is _Mountain.py.  -->
  <processor>

    <specific name='Mountain'>
      <!-- the part of the configuration file concerning the "Mountain.blend" scene. -->
    </specific>
    <specific name='spider'>
      <!-- the part of the configuration file concerning the "spider.blend" scene. -->
    </specific>

    <osc host='localhost' port='3819' configuration='ambisonic EVE' /> <!-- Which connexion to the OSC (Open Sound Control) host ?
    configuration parameter is send to the OSC host -->



    <!--
	For VRPN management, Blender Cave will try to load the module with the same name than the current .blend file prefixed by vrpn_ (ie : bpcem_playground_CAVE.blend => vrpn_bpcem_playground_CAVE.py)
	See samples for its use
    -->
    <vrpn>
      <tracker name="Tracker0" host="localhost" scale='1.0'>
	<!-- Le paramètre "scale" permet de changer l'échelle globale du tracker (certains utilisent le milimètre ...) -->

	<transformation>
	  <!--
	      Here goes transformation for all sensors
	  -->
	  <translate x='-0.10592269897460938' y='-0.59547358751297' z='1.6200547218322754' />
	  <!--
	      But can also be : 
	      <scale factor='5.0' x='1.0' y='0.0' z='0.0' />
	      Where factor is the factor. x, y, z represents the axis of the scale (can be omitted)
	      
	      <rotare angle='3.1415926' x='1.0' y='0.0' z='0.0' />
	      Where angle is the angle and x, y, z represents the axis of the rotation
	      
	      You can add as many lines as necessary
	  -->
	</transformation>


	<sensor id="0" processor_method='user_position' data='user A'> 
	  <!-- The "user_position" method is inherited from processor.Processor and manage the user position. The user name is the data provided to the method -->
	  <transformation>
	    <!-- Same thing for tracker, but for this sensor only -->
	  </transformation>
	</sensor>
	<sensor id="1" processor_method='tracker_1'/>
      </tracker>
      <tracker name="Tracker1" host="localhost" />
      <analog name="Analog0" host="localhost" processor_method="movements"/>
      <button name="Button0" host="localhost" processor_method="buttons"/>
    </vrpn>
  </processor>

</blender_cave>
